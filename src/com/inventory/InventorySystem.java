/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.inventory;

/**
 *
 * @author rajan.chaturvedi
 */
import com.inventory.beans.Inventory;
import net.proteanit.sql.DbUtils;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import java.util.Properties;
import com.inventory.dao.InventryMgmtDao;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.TableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import java.awt.Color;
import java.awt.Component;
import javax.swing.JTable;
import java.awt.event.ItemEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
public class InventorySystem extends javax.swing.JFrame {

    private Properties prop;
    private InventryMgmtDao dao;
    
    /**
     * Creates new form InventorySystem
     */
    public InventorySystem() {
        try{
        prop=ConfigureProperties.loadProperties();
        dao= new InventryMgmtDao(prop);
        initComponents();
        updateComponents();
        updateTable();
        }catch(Exception ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        selectable = new javax.swing.JComboBox<String>();
        searchval = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        batteryTypeList = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        polarity = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inventory Management");
        setLocationByPlatform(true);
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 800, 800));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        selectable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        selectable.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectableItemStateChanged(evt);
            }
        });
        selectable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectableActionPerformed(evt);
            }
        });
        jPanel3.add(selectable, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 125, 30));

        searchval.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchval.setToolTipText("Search");
        searchval.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchvalKeyReleased(evt);
            }
        });
        jPanel3.add(searchval, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 146, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Search");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, 51, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Filter ");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        batteryTypeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batteryTypeListActionPerformed(evt);
            }
        });
        jPanel3.add(batteryTypeList, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 10, 122, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("BatteryType");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 10, -1, 20));

        jPanel3.add(polarity, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 10, 112, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Polarity");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 10, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153), null, null));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAlignmentX(1.0F);
        jTable1.setAlignmentY(1.0F);
        jTable1.setCellSelectionEnabled(true);
        jTable1.setEditingColumn(1);
        jTable1.setEditingRow(1);
        jTable1.setGridColor(new java.awt.Color(153, 153, 153));
        jTable1.setMaximumSize(new java.awt.Dimension(200, 64));
        jTable1.setName("Search Table"); // NOI18N
        jTable1.setSelectionBackground(new java.awt.Color(204, 204, 204));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchtableClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(273, 273, 273)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1123, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectableActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new InventoryForm(this,dao).setVisible(true);
        this.disable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SearchtableClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchtableClicked
        // TODO add your handling code here:
        try{
        int row = jTable1.getSelectedRow();
        TableModel tm=jTable1.getModel();
        Inventory obj= new Inventory();
        int id = Integer.parseInt(jTable1.getModel().getValueAt(row, 0).toString());
         obj.setId(id);
         obj.setBatteryModel(getValue(tm.getValueAt(row, 1)));
         obj.setBrand(getValue(tm.getValueAt(row, 4)));
         obj.setBatteryType(getValue(tm.getValueAt(row, 7)));
         obj.setConnectortype(getValue(tm.getValueAt(row, 9)));
         obj.setCapacity(getValue(tm.getValueAt(row, 3)));
         obj.setMobileModel(getValue(tm.getValueAt(row, 2)));
         obj.setPinDetail(getValue(tm.getValueAt(row, 8)));
         obj.setPolarity(getValue(tm.getValueAt(row, 6)));
         obj.setType(getValue(tm.getValueAt(row, 5)));
         new UpdateFrame(this,obj,dao).setVisible(true);
         this.disable();
        }catch(Exception ex){
                 ex.printStackTrace();
                 JOptionPane.showConfirmDialog(null, ex);
                 }
    }//GEN-LAST:event_SearchtableClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
       System.exit(0);
    }//GEN-LAST:event_formWindowClosed

    private void searchvalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchvalKeyReleased
        try{
            StringBuilder sb= new StringBuilder("select * from inventory");
        // String query="select * from inventory";
        String selVal=selectable.getSelectedItem().toString();
        String polr=polarity.getSelectedItem().toString();
        String btryType=batteryTypeList.getSelectedItem().toString();
        if(!selVal.equalsIgnoreCase("select")){
            if((!"".equals(searchval.getText())) && !(searchval.getText()==null)){
               
                sb.append(" where "+selVal+" like '%"+searchval.getText()+"%'");
                if(!polr.equalsIgnoreCase("Select")){
                    sb.append(" and polarity like '%"+polr+"%'");
                }
                if(!btryType.equalsIgnoreCase("Select")){
                    sb.append(" and batterytype like '%"+btryType+"%'");
                }
                
                System.out.println("-----query1----------"+sb.toString());
             searchedTableRecord(sb.toString());    
           }else{
               updateTable();
           }
        }else{
             if((!"".equals(searchval.getText())) && !(searchval.getText()==null)){
                 //(batterytype like '%"+btryType+"%' and polarity like '%"+polr+"%')
                 sb.append(" where ( Brand like '%"+searchval.getText()+"%' or BatteryModelNo like '%"+searchval.getText()+
                          "%' "+"or phonemodel like '%"+searchval.getText()+"%' "+"or type like '%"+searchval.getText()+"%')");
                 if(!polr.equalsIgnoreCase("Select") && btryType.equalsIgnoreCase("Select")){
                    sb.append(" and polarity like '%"+polr+"%'");
                }else if(polr.equalsIgnoreCase("Select") && !btryType.equalsIgnoreCase("Select")){
                    sb.append(" and batterytype like '%"+btryType+"%'");
                }else if(!polr.equalsIgnoreCase("Select") && !btryType.equalsIgnoreCase("Select")){
                    sb.append(" and (batterytype like '%"+btryType+"%' and polarity like '%"+polr+"%')");
                }else{
                    sb.append("");
                }
                  
                System.out.println("-----query2----------"+sb.toString());
             searchedTableRecord(sb.toString());    
             }else{
               updateTable();
             }
        }
        }catch(Exception ex){
            ex.printStackTrace();
            JOptionPane.showConfirmDialog(null, ex);
        }
    }//GEN-LAST:event_searchvalKeyReleased

    private void batteryTypeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batteryTypeListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_batteryTypeListActionPerformed

    private void selectableItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectableItemStateChanged
      if(evt.getStateChange()==ItemEvent.SELECTED){
          try {
              searchval.setText("");
              this.updateTable();
          } catch (Exception ex) {
              JOptionPane.showConfirmDialog(null, ex);
          }
      }
    }//GEN-LAST:event_selectableItemStateChanged

    public void updateTable()throws Exception{
       ResultSet rs=dao.getAllRecords();
       jTable1.setModel(DbUtils.resultSetToTableModel(rs));  
       
    }
    
    public void searchedTableRecord(String query)throws Exception{
         ResultSet rs=dao.getSearchedRecord(query);
         jTable1.setModel(DbUtils.resultSetToTableModel(rs)); 
    }
    
    private void updateComponents()throws Exception{
        
           List<String> items= dao.getSelectableList();
           for(String Item:items){
              selectable.addItem(Item);
           }
          selectable.setSelectedIndex(2);
          String[] batteryType=prop.getProperty("battryType").split(",");
          String[] pol=prop.getProperty("polarity").split(",");
          batteryTypeList.setModel(new DefaultComboBoxModel(batteryType));
          polarity.setModel(new DefaultComboBoxModel(pol));
          
      jTable1.setDefaultRenderer(Object.class, new TableCellRenderer(){
		    private DefaultTableCellRenderer DEFAULT_RENDERER =  new DefaultTableCellRenderer();

		            @Override
		            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		                Component c = DEFAULT_RENDERER.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		                
		                if (row%2 == 0){
		                    c.setBackground(Color.WHITE);

		                }
		                else {
		                    c.setBackground(Color.green);
		                }     

		       //Add below code here
		                return c;
		            }

		        });
    }
    
    private String getValue(Object value){
        if(value==null){
            return "";
        }else{
            return value.toString();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox batteryTypeList;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox polarity;
    private javax.swing.JTextField searchval;
    private javax.swing.JComboBox<String> selectable;
    // End of variables declaration//GEN-END:variables
}
